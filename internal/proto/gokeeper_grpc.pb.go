// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gokeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoKeeper_AddText_FullMethodName    = "/gokeeper.GoKeeper/AddText"
	GoKeeper_EditText_FullMethodName   = "/gokeeper.GoKeeper/EditText"
	GoKeeper_DeleteText_FullMethodName = "/gokeeper.GoKeeper/DeleteText"
	GoKeeper_AddCard_FullMethodName    = "/gokeeper.GoKeeper/AddCard"
	GoKeeper_EditCard_FullMethodName   = "/gokeeper.GoKeeper/EditCard"
	GoKeeper_DeleteCard_FullMethodName = "/gokeeper.GoKeeper/DeleteCard"
)

// GoKeeperClient is the client API for GoKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoKeeperClient interface {
	AddText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
	EditText(ctx context.Context, in *TextEditRequest, opts ...grpc.CallOption) (*TextResponse, error)
	DeleteText(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	AddCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	EditCard(ctx context.Context, in *CardEditRequest, opts ...grpc.CallOption) (*CardResponse, error)
	DeleteCard(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type goKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGoKeeperClient(cc grpc.ClientConnInterface) GoKeeperClient {
	return &goKeeperClient{cc}
}

func (c *goKeeperClient) AddText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, GoKeeper_AddText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKeeperClient) EditText(ctx context.Context, in *TextEditRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, GoKeeper_EditText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKeeperClient) DeleteText(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GoKeeper_DeleteText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKeeperClient) AddCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, GoKeeper_AddCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKeeperClient) EditCard(ctx context.Context, in *CardEditRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, GoKeeper_EditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKeeperClient) DeleteCard(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GoKeeper_DeleteCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoKeeperServer is the server API for GoKeeper service.
// All implementations must embed UnimplementedGoKeeperServer
// for forward compatibility.
type GoKeeperServer interface {
	AddText(context.Context, *TextRequest) (*TextResponse, error)
	EditText(context.Context, *TextEditRequest) (*TextResponse, error)
	DeleteText(context.Context, *IdRequest) (*SuccessResponse, error)
	AddCard(context.Context, *CardRequest) (*CardResponse, error)
	EditCard(context.Context, *CardEditRequest) (*CardResponse, error)
	DeleteCard(context.Context, *IdRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedGoKeeperServer()
}

// UnimplementedGoKeeperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoKeeperServer struct{}

func (UnimplementedGoKeeperServer) AddText(context.Context, *TextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedGoKeeperServer) EditText(context.Context, *TextEditRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditText not implemented")
}
func (UnimplementedGoKeeperServer) DeleteText(context.Context, *IdRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteText not implemented")
}
func (UnimplementedGoKeeperServer) AddCard(context.Context, *CardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedGoKeeperServer) EditCard(context.Context, *CardEditRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCard not implemented")
}
func (UnimplementedGoKeeperServer) DeleteCard(context.Context, *IdRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedGoKeeperServer) mustEmbedUnimplementedGoKeeperServer() {}
func (UnimplementedGoKeeperServer) testEmbeddedByValue()                  {}

// UnsafeGoKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoKeeperServer will
// result in compilation errors.
type UnsafeGoKeeperServer interface {
	mustEmbedUnimplementedGoKeeperServer()
}

func RegisterGoKeeperServer(s grpc.ServiceRegistrar, srv GoKeeperServer) {
	// If the following call pancis, it indicates UnimplementedGoKeeperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoKeeper_ServiceDesc, srv)
}

func _GoKeeper_AddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKeeperServer).AddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKeeper_AddText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKeeperServer).AddText(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKeeper_EditText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKeeperServer).EditText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKeeper_EditText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKeeperServer).EditText(ctx, req.(*TextEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKeeper_DeleteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKeeperServer).DeleteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKeeper_DeleteText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKeeperServer).DeleteText(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKeeper_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKeeperServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKeeper_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKeeperServer).AddCard(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKeeper_EditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKeeperServer).EditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKeeper_EditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKeeperServer).EditCard(ctx, req.(*CardEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKeeper_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKeeperServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKeeper_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKeeperServer).DeleteCard(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoKeeper_ServiceDesc is the grpc.ServiceDesc for GoKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gokeeper.GoKeeper",
	HandlerType: (*GoKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddText",
			Handler:    _GoKeeper_AddText_Handler,
		},
		{
			MethodName: "EditText",
			Handler:    _GoKeeper_EditText_Handler,
		},
		{
			MethodName: "DeleteText",
			Handler:    _GoKeeper_DeleteText_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _GoKeeper_AddCard_Handler,
		},
		{
			MethodName: "EditCard",
			Handler:    _GoKeeper_EditCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _GoKeeper_DeleteCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gokeeper.proto",
}
