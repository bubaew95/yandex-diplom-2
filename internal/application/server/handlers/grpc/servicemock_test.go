// Code generated by mockery v2.52.2. DO NOT EDIT.

package grpc

import (
	context "context"

	model "github.com/bubaew95/yandex-diplom-2/internal/application/server/model"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddBinary provides a mock function with given fields: ctx, r
func (_m *MockService) AddBinary(ctx context.Context, r *model.BinaryRequest) (model.BinaryResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for AddBinary")
	}

	var r0 model.BinaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.BinaryRequest) (model.BinaryResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.BinaryRequest) model.BinaryResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.BinaryResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.BinaryRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCard provides a mock function with given fields: ctx, r
func (_m *MockService) AddCard(ctx context.Context, r *model.CardRequest) (model.CardResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for AddCard")
	}

	var r0 model.CardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CardRequest) (model.CardResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CardRequest) model.CardResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.CardResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CardRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddText provides a mock function with given fields: ctx, r
func (_m *MockService) AddText(ctx context.Context, r *model.TextRequest) (model.TextResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for AddText")
	}

	var r0 model.TextResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TextRequest) (model.TextResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TextRequest) model.TextResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.TextResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TextRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: ctx, r
func (_m *MockService) AddUser(ctx context.Context, r *model.RegistrationRequest) (model.RegistrationResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 model.RegistrationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RegistrationRequest) (model.RegistrationResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RegistrationRequest) model.RegistrationResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.RegistrationResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RegistrationRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCard provides a mock function with given fields: ctx, ID
func (_m *MockService) DeleteCard(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteText provides a mock function with given fields: ctx, ID
func (_m *MockService) DeleteText(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteText")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditCard provides a mock function with given fields: ctx, r
func (_m *MockService) EditCard(ctx context.Context, r *model.CardRequest) (model.CardResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for EditCard")
	}

	var r0 model.CardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CardRequest) (model.CardResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CardRequest) model.CardResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.CardResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CardRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditText provides a mock function with given fields: ctx, r
func (_m *MockService) EditText(ctx context.Context, r *model.TextRequest) (model.TextResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for EditText")
	}

	var r0 model.TextResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TextRequest) (model.TextResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TextRequest) model.TextResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.TextResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TextRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, r
func (_m *MockService) Login(ctx context.Context, r *model.LoginRequest) (model.AuthResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginRequest) (model.AuthResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginRequest) model.AuthResponse); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(model.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LoginRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
